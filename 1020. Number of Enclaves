class Solution {
public:
    //Algorithm :
    // Approach : Select the 1 in the edga and the make it as 0 and also make all it 4 directional connecting node to who have 1 to 0 
    // Then just count all the 1's in the grid

    void dfs(vector<vector<int> > &grid ,int i , int j){
        // return when out of boundry or is 
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || grid[i][j] == 0)
            return;

        // making edge and connected 1 to 0
        grid[i][j] = 0;

        dfs(grid,i,j-1);
        dfs(grid,i,j+1);
        dfs(grid,i-1,j);
        dfs(grid,i+1,j);
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int count = 0;

        // 
        for(int i = 0;i < grid.size();i++){
            for(int j = 0;j < grid[0].size();j++){
                if(i == 0 || j == 0 || i == grid.size() - 1 || j == grid[0].size() - 1)
                    if(grid[i][j] == 1)
                        dfs(grid,i,j);
            }
        }

        for(int i = 0;i < grid.size();i++){
            for(int j = 0;j < grid[0].size();j++){
                if(grid[i][j] == 1)
                    count++;
            }
        }

        return count;
    }
};
