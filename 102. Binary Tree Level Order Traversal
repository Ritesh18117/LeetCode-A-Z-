/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // USE BFS
    // Step 1 : Create a queue and push root into queue
    // Step 2 : Traverse that queue until its empty 
    // Step 2 a : Traverse till queue is not empty and put the front in vis vector and pop item from queue
    // Step 2 b :is q.front left/right exist push to queue
    //step 3 : add vis to res; 
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root == NULL)
            return res;

        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int sizee = q.size();
            vector<int> vis;
            while(sizee){
                TreeNode *front = q.front();
                vis.push_back(q.front()->val);
                q.pop();
                if(front->left)
                    q.push(front->left);
                if(front->right)
                    q.push(front->right);
                sizee--;
            }
            res.push_back(vis);
        }

        return res;
    }
};
