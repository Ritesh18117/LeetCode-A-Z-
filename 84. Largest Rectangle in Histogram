class Solution {
    
        public int[] previousSmaller(int[] arr){
        int[] ps = new int[arr.length];
        Stack<Integer> s = new Stack<>();
        
        for(int i = 0;i < arr.length;i++){
            while(!s.isEmpty() && arr[s.peek()] >= arr[i])
                s.pop();
            
            if(s.isEmpty()){
                ps[i] = -1;
            } else{
                ps[i] = s.peek();
            }
            s.push(i);
        }
        return ps;
    }

    public int[] nextSmaller(int[] arr){
        int ns[] = new int[arr.length];
        Stack<Integer> s = new Stack<>();

        for(int i = arr.length -1 ;i >= 0;i--){
            while(!s.isEmpty() && arr[s.peek()] >= arr[i]){
                s.pop();
            }

            if(s.isEmpty()){
                ns[i] = arr.length;
            } else{
                ns[i] = s.peek();
            }

            s.push(i);
        }
        return ns;
    }

    public int largestRectangleArea(int[] heights) {
        int[] ps = previousSmaller(heights);
        int[] ns = nextSmaller(heights);
        int maxArea = 0;
        for(int i = 0;i < heights.length;i++){
            int curr = (ns[i] - ps[i] - 1) * heights[i];
            maxArea = Math.max(maxArea,curr);
        }
        return maxArea;
    }
}
