class Solution {
public:

    bool island(vector<vector<int>> &grid, int i, int j){
        // checking for out of bound
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size())
            return false;
        // checking for water(1) or already visited or not
        if(grid[i][j] == 1 || grid[i][j] == 2)
            return true;
        
        // marking visited
        grid[i][j] = 2;

        bool isLeftClosed = island(grid, i, j - 1);
        bool isRightClosed = island(grid, i, j + 1);
        bool isTopClosed = island(grid, i + 1, j);
        bool isBottomClosed = island(grid, i - 1, j);

        return isLeftClosed && isRightClosed && isTopClosed && isBottomClosed;

    }

    int closedIsland(vector<vector<int>>& grid) {
        int count = 0;
        for(int i = 0;i < grid.size();i++){
            for(int j = 0;j < grid[0].size();j++){
                if(grid[i][j] == 0 && island(grid,i,j))
                    count++;
            }
        }
        return count;
    }
};
